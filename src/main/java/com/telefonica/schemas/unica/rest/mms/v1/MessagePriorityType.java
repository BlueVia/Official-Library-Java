//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.05.30 at 03:11:16 PM CEST 
//


package com.telefonica.schemas.unica.rest.mms.v1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for MessagePriorityType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="MessagePriorityType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Default"/>
 *     &lt;enumeration value="Low"/>
 *     &lt;enumeration value="Normal"/>
 *     &lt;enumeration value="High"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "MessagePriorityType")
@XmlEnum
public enum MessagePriorityType {


    /**
     * 
     *     					Default message priority
     *     				
     * 
     */
    @XmlEnumValue("Default")
    DEFAULT("Default"),

    /**
     * 
     *     					Low message priority
     *     				
     * 
     */
    @XmlEnumValue("Low")
    LOW("Low"),

    /**
     * 
     *     					Normal message priority
     *     				
     * 
     */
    @XmlEnumValue("Normal")
    NORMAL("Normal"),

    /**
     * 
     *     					High message priority
     *     				
     * 
     */
    @XmlEnumValue("High")
    HIGH("High");
    private final String value;

    MessagePriorityType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static MessagePriorityType fromValue(String v) {
        for (MessagePriorityType c: MessagePriorityType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
